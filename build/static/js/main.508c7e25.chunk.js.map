{"version":3,"sources":["ListItems.js","App.js","serviceWorker.js","index.js"],"names":["ListItems","props","listItems","items","map","item","className","key","type","id","value","text","onChange","e","setUpdate","target","icon","onClick","deleteItem","duration","easing","library","add","faTrash","faPlusCircle","faPlusSquare","App","state","currentItem","handleInput","bind","addItem","event","this","setState","Date","now","filteredItems","filter","preventDefault","newItem","newItems","Container","onSubmit","placeholder","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sUA4BeA,MAvBf,SAAmBC,GACf,IACMC,EADQD,EAAME,MACIC,KAAI,SAAAC,GACxB,OAAO,yBAAKC,UAAU,OAAOC,IAAI,YAC7B,2BAAG,2BAAOC,KAAK,OAAOC,GAAIJ,EAAKE,IAAKG,MAAOL,EAAKM,KAAMC,SAAU,SAACC,GAC7DZ,EAAMa,UAAUD,EAAEE,OAAOL,MAAOL,EAAKE,QAErC,8BACA,kBAAC,IAAD,CAAiBD,UAAU,UAAUU,KAAK,QAAQC,QAAS,kBAAMhB,EAAMiB,WAAWb,EAAKE,cAKnG,OACI,6BACI,kBAAC,IAAD,CAAUY,SAAU,IAAKC,OAAO,eAC3BlB,K,sBCXjBmB,IAAQC,IAAIC,KACZF,IAAQC,IAAIE,KACZH,IAAQC,IAAIG,K,IAgFGC,E,kDA5EX,WAAYzB,GAAQ,IAAD,8BACf,cAAMA,IACD0B,MAAQ,CACTxB,MAAO,GACPyB,YAAa,CACTjB,KAAM,GACNJ,IAAK,KAGb,EAAKsB,YAAc,EAAKA,YAAYC,KAAjB,gBACnB,EAAKC,QAAU,EAAKA,QAAQD,KAAb,gBACf,EAAKZ,WAAa,EAAKA,WAAWY,KAAhB,gBAClB,EAAKhB,UAAY,EAAKA,UAAUgB,KAAf,gBAZF,E,wDAePE,GACRC,KAAKC,SAAS,CACVN,YAAa,CACTjB,KAAMqB,EAAMjB,OAAOL,MACnBH,IAAK4B,KAAKC,W,iCAKX7B,GACP,IAAM8B,EAAgBJ,KAAKN,MAAMxB,MAAMmC,QAAO,SAAAjC,GAAI,OAAIA,EAAKE,MAAQA,KACnE0B,KAAKC,SAAS,CAAC/B,MAAOkC,M,gCAGhB1B,EAAMJ,GACZ,IAAMJ,EAAQ8B,KAAKN,MAAMxB,MACzBA,EAAMC,KAAI,SAAAC,GACFA,EAAKE,MAAQA,IACbF,EAAKM,KAAOA,MAGpBsB,KAAKC,SAAS,CACV/B,MAAOA,M,8BAKP6B,GACJA,EAAMO,iBACN,IAAMC,EAAUP,KAAKN,MAAMC,YAC3B,GAAqB,KAAjBY,EAAQ7B,KAAa,CACrB,IAAM8B,EAAQ,sBAAOR,KAAKN,MAAMxB,OAAlB,CAAyBqC,IACvCP,KAAKC,SAAS,CACV/B,MAAOsC,EACPb,YAAa,CACTjB,KAAM,GACNJ,IAAK,S,+BAOjB,OACI,kBAACmC,EAAA,EAAD,KACI,yBAAKpC,UAAU,OACX,yBAAKA,UAAU,WACX,2CAEJ,0BAAMG,GAAG,aAAakC,SAAUV,KAAKF,SACjC,2BAAOvB,KAAK,OAAOoC,YAAY,kBAAkBlC,MAAOuB,KAAKN,MAAMC,YAAYjB,KACxEC,SAAUqB,KAAKJ,cACtB,4BAAQrB,KAAK,UAAS,kBAAC,IAAD,CAAiBF,UAAU,UAAUU,KAAMS,QAErE,kBAAC,EAAD,CAAWtB,MAAO8B,KAAKN,MAAMxB,MAAOe,WAAYe,KAAKf,WAAYJ,UAAWmB,KAAKnB,kB,GAvEnF+B,IAAMC,WCFJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.508c7e25.chunk.js","sourcesContent":["import React from 'react';\nimport './ListItems.css'\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport FlipMove from 'react-flip-move';\n\nfunction ListItems(props) {\n    const items = props.items;\n    const listItems = items.map(item => {\n        return <div className=\"list\" key=\"item.key\">\n            <p><input type=\"text\" id={item.key} value={item.text} onChange={(e) => {\n                props.setUpdate(e.target.value, item.key)\n            }}/>\n                <span>\n                <FontAwesomeIcon className=\"faicons\" icon='trash' onClick={() => props.deleteItem(item.key)}/>\n            </span></p>\n\n        </div>\n    });\n    return (\n        <div>\n            <FlipMove duration={300} easing=\"ease-in-out\">\n                {listItems}\n            </FlipMove>\n        </div>\n    )\n\n}\n\nexport default ListItems;","import React from 'react';\nimport './App.css';\nimport ListItems from \"./ListItems\";\nimport {library} from \"@fortawesome/fontawesome-svg-core\";\nimport {faTrash} from \"@fortawesome/free-solid-svg-icons\";\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport {faPlusCircle} from \"@fortawesome/free-solid-svg-icons\";\nimport {faPlusSquare} from \"@fortawesome/free-solid-svg-icons\";\nimport Container from 'react-bootstrap/Container'\n\nlibrary.add(faTrash);\nlibrary.add(faPlusCircle);\nlibrary.add(faPlusSquare);\n\nclass App extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            items: [],\n            currentItem: {\n                text: '',\n                key: ''\n            }\n        };\n        this.handleInput = this.handleInput.bind(this);\n        this.addItem = this.addItem.bind(this);\n        this.deleteItem = this.deleteItem.bind(this);\n        this.setUpdate = this.setUpdate.bind(this);\n    }\n\n    handleInput(event) {\n        this.setState({\n            currentItem: {\n                text: event.target.value,\n                key: Date.now()\n            }\n        })\n    }\n\n    deleteItem(key) {\n        const filteredItems = this.state.items.filter(item => item.key !== key);\n        this.setState({items: filteredItems})\n    }\n\n    setUpdate(text, key) {\n        const items = this.state.items;\n        items.map(item => {\n            if (item.key === key) {\n                item.text = text;\n            }\n        });\n        this.setState({\n            items: items\n\n        })\n    }\n\n    addItem(event) {\n        event.preventDefault();\n        const newItem = this.state.currentItem;\n        if (newItem.text !== '') {\n            const newItems = [...this.state.items, newItem];\n            this.setState({\n                items: newItems,\n                currentItem: {\n                    text: '',\n                    key: ''\n                }\n            })\n        }\n    }\n\n    render() {\n        return (\n            <Container>\n                <div className=\"app\">\n                    <div className=\"heading\">\n                        <h1>To-Do List</h1>\n                    </div>\n                    <form id=\"to-do-form\" onSubmit={this.addItem}>\n                        <input type=\"text\" placeholder=\"Enter your text\" value={this.state.currentItem.text}\n                               onChange={this.handleInput}/>\n                        <button type=\"submit\"><FontAwesomeIcon className=\"faicons\" icon={faPlusSquare}/></button>\n                    </form>\n                    <ListItems items={this.state.items} deleteItem={this.deleteItem} setUpdate={this.setUpdate}/>\n                </div>\n            </Container>\n        )\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}